在 SpringBoot中 @Enable的实现方式用两种。

一种是注解驱动的方式，我们以 @EnableWebMvc为例进行探究；

另外一种是接口编程的方式，我们以 @EnableCaching为例进行探究。


我们通过上面了解了 @EnableXXX的两种实现方式。其中基于注解驱动方式激活（启动）配置的方式是相对方便的一个实现，
需要激活什么就直接导入该配置类即可；而基于接口编程方式激活（启动）配置的方式相对更加灵活，可以根据自定义的规则来选择激活哪些配置类，
不激活哪些配置类，这是一种比较灵活的方式，方便我们对其进行扩展。

总之这两种方式都是手动激活的方式，换言之我们需要在启动类上添加 @Enable***的注解，
来手动激活配置，这种方式在某些场景并不是很方便